PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.ArrayList;

/*
//TODO classe lugosi

	static void pretty_printer()
	{

		if(e instanceof (Lugosi))
		{
			pretty_printer(e.main_func);
			ArrayList<Func> functions = e.funcs;
			for(Func func : functions){
				pretty_printer(func);
			}

		}
		else if(e instanceof (Main))
		{
			System.out.print("main");
			System.out.print("{");
			ArrayList<Var> vardecl = e.vars;
			for(Var var : vardecl){
				pretty_printer(var);
			}

			ArrayList<Comamand> seqcomandos = e.comandos;
			for(Comamand com : seqcomandos){
				pretty_printer(com);
			}
			System.out.print("}");
		}

		else if(e instanceof (Var))
		{
			System.out.print("var");

			pretty_printer(e.type);

			pretty_printer(e.id);

			System.out.print(";");
		}

		else if(e instanceof (Int)) //TODO arrumar a parte do Type
		{
			System.out.print("int");
		}

		else if(e instanceof (Bool))
		{
			System.out.print("bool");
		
		}

		else if(e instanceof (Atrib))
		{
			pretty_printer(e.id);
			System.out.print(":=");
			pretty_printer(e.exp);
			System.out.print(";");
		}

		else if(e instanceof (functionCall))
		{
			pretty_printer(e.id);
			System.out.print("(");

			for(Exp exp: e.args) {
				pretty_printer(exp);
			}

			System.out.print(")");
		
			System.out.print(";");
		}

		else if(e instanceof (If))
		{
			
			System.out.print("if");
			System.out.print("(");

			
			pretty_printer(e.exp);
			

			System.out.print(")");
		
			System.out.print("{");

			for(Command com: e.comandos) {
				pretty_printer(com);
			}

			System.out.print("}");
		
			System.out.print(";");
		}
	
		else if (e instanceof (While))
		{
			System.out.print("while");
			System.out.print("(");

			
			pretty_printer(e.exp);
			

			System.out.print(")");
			System.out.print("{");
			System.out.print("do");

			for(Command com: e.comandos) {
				pretty_printer(com);
			}

			System.out.print("}");
		
			System.out.print(";");
				
		}

		else if (e instanceof (DoWhile))
		{
			
			System.out.print("{");
			System.out.print("do");

			for(Command com: e.comandos) {
				pretty_printer(com);
			}

			System.out.print("}");

			System.out.print("while");
			System.out.print("(");

			
			pretty_printer(e.exp);
			

			System.out.print(")");
		
			System.out.print(";");
		}

		else if (e instanceof (Return))
		{
			System.out.print("Return");
			pretty_printer(e.exp);
			System.out.print(";")

		}
		else if(e instanceof (Print))
		{
			System.out.print("Return");
			System.out.print("(");

			pretty_printer(e.exp);

			System.out.print(")");
			System.out.print(";")

		}

		else if(e instanceof (ExpOpExp))
		{
			System.out.print("(");

			pretty_printer(e.exp1);
			pretty_printer(e.op);
			pretty_printer(e.exp2);

			System.out.print(")");
		}

		else if(e instanceof (Fator))
		{
			pretty_printer(e.fator);
		}

		else if(e instanceof (FatorId))
		{
			pretty_printer(e.id);
		}

		else if(e instanceof (FatorIdLista))
		{
			pretty_printer(e.id);
			System.out.print("(");

			for (Exp expression: e.exp) {
				pretty_printer(expression);
			}
			System.out.print(")");

		}

		else if(e instanceof (FatorNum))
		{
			pretty_printer(e.num);
		}
		else if(e instanceof NUM)
		{
			System.out.print(e.valor);
		}
		else if(e instanceof FatorBool)
		{
			pretty_printer(e.valor)
		}
		else if(e instanceof Bool)
		{
			System.out.print(e.valor);
		}
	
		else if(e instanceof OP) //TODO classe Op
		{
			System.out.print(e.valor);
		}

		else if(e instanceof Func) 
		{
			System.out.print("function");
			pretty_printer(e.returnType);
			System.out.print(e.name);
			System.out.print("(");
			for (Var arg:e.args ) {
				pretty_printer(arg);
			}
			System.out.print(")");
			System.out.print("{");
			for (Var var:e.vars ) {
				pretty_printer(var);
			}
			for (Var com:e.comandos ) {
				pretty_printer(com);
			}
			System.out.print("}");
		}
	}
}
*/

class Lugosi {
	private Main main_func;
	private ArrayList<Func> funcs;

	public Lugosi(Main main_func, ArrayList<Func> funcs){
		this.main_func = main_func;
		this.funcs = new ArrayList(funcs);
	}
  
  public static void main(String args[]) throws ParseException,IOException {

		Lugosi parser = new Lugosi(new FileInputStream(args[0]));
		parser.Lugosi();
		//pretty_printer(e);
    	//System.println("Teste");

		return;

	}
}

class Func {

	private Type returnType;
	private String name;
	private ArrayList<Var> args;
	private ArrayList<Var> vars;
	private ArrayList<Command> comandos;

	public Func(Type returnType, String name, ArrayList<Var> args, ArrayList<Var> vars, ArrayList<Command> comandos){
		this.returnType = returnType;
		this.name = name;
		this.args = new ArrayList(args);
		this.vars = new ArrayList(vars);
		this.comandos = new ArrayList(comandos);
	}

}

class Main extends Func {

	public Main(ArrayList<Var> vars, ArrayList<Command> commands){
		super(
			new IntType(),
			"main",
			new ArrayList(),
			new ArrayList(vars),
			new ArrayList(commands)
		);
	}

}


class Var {
	private Type type;
	private ID id;

	public Var(Type type, ID id){
		this.type = type;
		this.id = id;
	}
}

//--- Comandos

abstract class Command {}

class Atrib extends Command {
	ID id;
	Exp exp;

	public Atrib (ID id, Exp exp){
		this.id = id;
		this.exp = exp;
	}

}

//Chamada de função

class functionCall extends Command {
	ID id;
	ArrayList<Exp> args;

	public functionCall(ID id, ArrayList<Exp> args){
		this.id = id;
		this.args = args;
	}
}


//If
class If extends Command {
	//Condition
	Exp exp;
	ArrayList<Command> comandos;

	public If (Exp exp, ArrayList<Command> comandos) {
		this.exp = exp;
		this.comandos = comandos;
	}

}

//While
class While extends Command {
	Exp exp;
	ArrayList<Command> comandos;

	public While (Exp exp, ArrayList<Command> comandos) {
		this.exp = exp;
		this.comandos = comandos;
	}

}

//Do While
class DoWhile extends While {

  public DoWhile (Exp exp, ArrayList<Command> comandos){
    super(exp, comandos);
  }

}

//Return
class Return extends Command {
	private Exp exp;

public Return (Exp exp) {
	this.exp = exp;
}

}

//Print
class Print extends Command {
	Exp exp;

	public Print (Exp exp) {
		this.exp = exp;
	}

}

// ----------------------------------

class Indexing extends Command {}


//----- Types

abstract class Type {}
class BoolType extends Type {}
class IntType extends Type {}

// -----------------------------------

//ID
class ID {
	String nome;

	public ID (String nome) {
		this.nome = nome;
	}

}

//NUM
class NUM {
	String valor;

	public NUM (String valor){this.valor=valor;}

}

class Bool {
	String valor;
	public Bool(String valor){this.valor=valor;}
}
//---- Exp

class Fator extends Exp {}

//Base
abstract class Exp {}

//Exp op Exp
class ExpOpExp extends Exp {
	Exp exp1;
	String op;
	Exp exp2;

	public ExpOpExp (Exp exp1, String op, Exp exp2) { 
		this.exp1 = exp1;
		this.op = op;
		this.exp2 = exp2;
	}

}


//Fator = id
class FatorId extends Fator {
	ID id;

	public FatorId (ID id){
		this.id = id;
	}

}

//Fator = id (lista)
class FatorIdLista extends Fator {
	ID id;
	ArrayList<Exp> exp;

	public FatorIdLista (ID id, ArrayList<Exp> exp){
		this.id = id;
		this.exp = exp;
	}

}

//Fator = num
class FatorNum extends Fator {
	NUM num;
	
	public FatorNum (NUM num) {
		this.num = num;
	}

}


//Fator = bool
class FatorBool extends Fator {
	Bool valor;

	public FatorBool (Bool valor){
		this.valor = valor;
	}
}



PARSER_END(Lugosi)

SKIP :
{
	" "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
	<MAIN: "main">
| <VAR: "var">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <VIRGULA: ",">
| <PVIRGULA: ";">
| <INT: "int">
| <BOOL: "bool">
| <IF: "if">
| <ELSE: "else">
| <WHILE: "while">
| <DO: "do">
| <RETURN: "return">
| <PRINT: "print">
| <ATRIB: ":=">
| <FUNCTION: "function">
| <TRUE: "true">
| <FALSE: "false>">
}

TOKEN :
{
	<OP: ("+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "==" | "!=")>
| <ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* ("_"(["a"-"z","A"-"Z","0"-"9"])+)?>
| <NUMERO: (["0"-"9"])+("."(["0"-"9"])+)?>
}

ArrayList<Command> SeqComandos():
{Command c; ArrayList<Command> comandos = new ArrayList<Command>();}
{
	( c=Comando() {comandos.add(c);})*

	{return comandos;}
}

Command Comando():
{Command c = null; ID id; Token t; Exp e1; Exp e2; ArrayList<Command> comandos; }
{
	(
		  ( t=<ID> {id = new ID(t.image);} ((<ATRIB> { c = new Atrib(id, Exp()); } ) | (<APARENTESES>  { c = new functionCall(id, ListaExp()); } <FPARENTESES>)) )
		| ( <IF> <APARENTESES> {e1 = Exp();} <FPARENTESES> <ACHAVES> { c = new If (e1, SeqComandos()); } <FCHAVES> )
		| ( <WHILE> <APARENTESES> {e1 = Exp(); } <FPARENTESES> <ACHAVES> {c = new While(e1, SeqComandos()); } <FCHAVES> )
		| ( <DO> <ACHAVES> { comandos = SeqComandos(); } <FCHAVES> <WHILE> <APARENTESES> { c = new DoWhile(Exp(), comandos); }  <FPARENTESES> )
		| ( <PRINT> <APARENTESES> { c = new Print(Exp()); } <FPARENTESES>)
		| ( <RETURN> { c = new Return (Exp()); }) 
	)
	<PVIRGULA>

	{return c;}
}

ArrayList<Func> Func ():
{ ArrayList<Func> functions = new ArrayList<Func>(); Type returnType; String name;  ArrayList<Var> args; ArrayList<Var> vars; ArrayList<Command> comandos; Token t; }
{

	(<FUNCTION> {returnType = Tipo();} t=<ID> <APARENTESES> { args = VarDecl(); } <FPARENTESES> <ACHAVES> {vars = VarDecl();} {comandos = SeqComandos();} <FCHAVES> {functions.add(new Func(returnType, t.image, args, vars, comandos));})*

	{return functions;}

}

Exp Exp():
{Exp retorno;Exp e1=null;Exp e2=null;Token t;}
{
	
		(<APARENTESES> e1=Exp() t=<OP> e2=Exp() <FPARENTESES> {retorno = new ExpOpExp(e1,t.image,e2);}) | (retorno=Fator())
	
	{return retorno;}
}

Fator Fator():
{Fator expF=null;ID id=null;ArrayList<Exp> l = new ArrayList<Exp>();Token t;}
{
	
		(t=<ID> {id=new ID(t.image);} ( <APARENTESES> (l=ListaExp())?  <FPARENTESES>)? {expF = new FatorIdLista(id,l);})
	| (t=<NUMERO> {expF = new FatorNum(new NUM(t.image));})
	| (t=<TRUE>   {expF = new FatorBool(new Bool(t.image));})
	| (t=<FALSE>  {expF = new FatorBool(new Bool(t.image));})
	
	{return expF;}
}

ArrayList<Exp> ListaExp():
{ArrayList<Exp> retorno = new ArrayList<Exp>();}
{
	({retorno.add(Exp());} (<VIRGULA> {retorno.add(Exp());})+)

	{return retorno;}
}

Type Tipo():
{Type type = null; Token t;}
{
	(
		  (t=<INT>  { type = new IntType(); }) 
		| (t=<BOOL> { type = new BoolType(); })
	)
	{return type;}
}

ArrayList<Var> VarDecl():
{ ArrayList<Var> lista_var = new ArrayList<Var>(); Type type=null; ID id=null; Token t;}
{
	( <VAR> { type=Tipo(); } t=<ID> { id = new ID(t.image); } <PVIRGULA> { lista_var.add(new Var(type, id)); } )*
	{return lista_var;}
}

Lugosi Lugosi () :
{Main main; ArrayList<Func> functions;}
{

	(main = Main())
	(functions = Func())
	<EOF>

	{ return (new Lugosi (main, functions)); }
}

Main Main ():
{ArrayList<Var> lista_var; ArrayList<Command> comandos;}
{
 <MAIN> <ACHAVES>

 { lista_var = VarDecl(); }
 { comandos = SeqComandos(); }

 <FCHAVES>

 {return (new Main (lista_var, comandos));}

}
PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.ArrayList;

public class Lugosi {

  private Main main;
  private ArrayList<Func> funcs;

  public static void main(String args[]) throws ParseException,IOException {

    Lugosi parser = new Lugosi(new FileInputStream(args[0]));
    parser.Lugosi();

  }

}

public class Func {

  private Type returnType;
  private String name;
  private ArrayList<Var> args;
  private ArrayList<Var> vars;
  private ArrayList<Comamand> commands;

  public Func(Type returnType, String name, ArrayList<Var> args, ArrayList<Var> vars, ArrayList<Commands> commands){
    this.returnType = returnType;
    this.name = name;
    this.args = new ArrayList(args);
    this.vars = new ArrayList(vars);
    this.commands = ArrayList(commands);
  }

}

public class Main extends Func {

  public Main(List<Var> vars, List<Command> commands){
    super(
      new Int(),
      "main",
      new ArrayList(),
      new ArrayList(vars),
      new ArrayList(commands)
    );
  }

}


public class Var {
  private Type type;
  private String value;

  public Var(String type, String value){
    this.type = type;
    this.value = value;
  }
}

//--- Comandos

public abstract class Command {}

public class Atrib extends Command {
  ID id;
  Exp exp;
}

//If
public class If extends Command {
  //Condition
  Exp exp;
  ArrayList<Comamand> comandos;


}

//While
public class While extends Command {
  Exp exp;
  ArrayList<Command> commandos;
}

//Do While
public class DoWhile extends While {}

//Return
public class Return extends Command {
  private String Value;
}

//Print
public class Print extends Command {
  Exp exp;
}

// ----------------------------------

public class Indexing extends Command {}


//----- Types

public abstract class Type {}

public class Int extends Type{}

public class Bool extends Type{}

// -----------------------------------

//ID
public class ID {
  String nome;

}

//NUM
public class NUM {
  String valor;

  public NUM (String valor){this.valor=valor;}

}

public class Bool {
  String valor;
  public Bool(String valor){this.valor=valor;}
}
//---- Exp

public class Exp extends ExpBase{
  private ExpBase exp1;
  private Op op;
  private ExpBase exp1;
}

public class Fator extends ExpBase {
  
}

//Base
public abstract class Exp {}

//Exp op Exp
class ExpOpExp extends Exp {
  Exp exp1;
  String op;
  Exp exp2;

  public ExpOpExp (Exp exp1, String op, Exp exp2) { 
    this.exp1 = exp1;
    this.op = op;
    this.exp2 = exp2;
  }

}

//Fator
class ExpFator extends Exp {
  Fator fator;

  public ExpFator (Fator fator) {
    this.fator = fator;
  }

}

//Fator base
public abstract class Fator {}

//Fator = id
class FatorId extends Fator {
  ID id;

  public FatorId (Id id){
    this.id = id;
  }

}

//Fator = id (lista)
class FatorIdLista extends Fator {
  ID id;
  ArrayList<Exp> exp;

  public FatorIdLista (Id id, ArrayList<Exp> exp){
    this.id = id;
    this.exp = exp;
  }

}

//Fator = num
class FatorNum extends Fator {
  NUM num;
  
  public FatorNum (NUM num) {
    this.num = num;
  }

}


//Fator = bool
class FatorBool extends Fator {
  Bool valor;

  public FatorBool (Bool valor){
    this.valor = valor;
  }
}



PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <VAR: "var">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <VIRGULA: ",">
| <PVIRGULA: ";">
| <INT: "int">
| <BOOL: "bool">
| <IF: "if">
| <ELSE: "else">
| <WHILE: "while">
| <DO: "do">
| <RETURN: "return">
| <PRINT: "print">
| <ATRIB: ":=">
| <FUNCTION: "function">
| <TRUE: "true">
| <FALSE: "false>">
}

TOKEN :
{
  <OP: ("+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "==" | "!=")>
| <ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* ("_"(["a"-"z","A"-"Z","0"-"9"])+)?>
| <NUMERO: (["0"-"9"])+("."(["0"-"9"])+)?>
}

void SeqComandos():
{}
{
  (Comando())*
}

void Comando():
{}
{
  (
      (<ID> ((<ATRIB> Exp()) | (<APARENTESES> (ListaExp())? <FPARENTESES>)))
    | (<IF> <APARENTESES> Exp() <FPARENTESES> <ACHAVES> SeqComandos() <FCHAVES>)
    | (<WHILE> <APARENTESES> Exp() <FPARENTESES> <ACHAVES> SeqComandos() <FCHAVES>)
    | (<DO> <ACHAVES> SeqComandos() <FCHAVES> <WHILE> <APARENTESES> Exp() <FPARENTESES>)
    | (<PRINT> <APARENTESES> Exp() <FPARENTESES>)
    | (<RETURN> Exp())
  )
  <PVIRGULA>
}

void Func ():
{}
{

  (<FUNCTION> Tipo() <ID> <APARENTESES> (ListaArg())? <FPARENTESES> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>)+

}

void ListaArg():
{}
{
  Tipo() <ID> (<VIRGULA> Tipo() <ID>)*
}

void Exp():
{Exp retorno;Exp e1=null;Exp e2=null;Token t;}
{
  
    (<APARENTESES> e1=Exp() t=<OP> e2=Exp() <FPARENTESES> {retorno = new ExpOpExp(e1,t.image,e2);}) | (retorno=Fator())
  
  {return retorno;}
}

void Fator():
{ExpFator expF=null;ID id=null;ArrayList<Exp> l = new ArrayList<>();Token t;}
{
  
    (t=<ID> {id=new ID(t.image);} (<APARENTESES> (l=ListaExp())?  <FPARENTESES>)? {expF = new FatorIdLista(id,l)})
  | (t=<NUMERO> {expF = new FatorNum(t.image);})
  | (t=<TRUE>   {expF = new FatorBool(t.image);})
  | (t=<FALSE>  {expF = new FatorBool(t.image);})
  
  {return expF;}
}

void ListaExp():
{ArrayList<Exp> retorno = new ArrayList<>();}
{
  {retorno.add(Exp())} (<VIRGULA> {retorno.add(Exp())})*

  {return retorno;}
}

void Tipo():
{Type type = null; Token t;}
{
  (
      (t=<INT> { type = new NUM(t.image); }) 
    | (t=<BOOL> { type = new Bool(t.image); })
  )
  {return type;}
}

void VarDecl():
{}
{
  (<VAR> Tipo() <ID> <PVIRGULA>)*
}

void Lugosi () :
{}
{

  Main()
  (Func())?
  <EOF>
}

void Main ():
{}
{
 <MAIN> <ACHAVES>

 VarDecl()
 SeqComandos()

 <FCHAVES>

}





